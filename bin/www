#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var colors = require('colors');
var https = require('https');
const mongoose = require('mongoose');
const config = require('../config');

/**
 * Setup database connection
 */

mongoose.connect(config.db[config.env].dbPath, {
  server: {
    socketOptions: {
      keepAlive: true
    }
  }
});

mongoose.connection.on('error', (err) => console.error(err.toString().red));
mongoose.connection.once('open', () => console.log("Successfully connected to MongoDB !".green));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.server.port || 8000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(config.server.https, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Add TLS Session resumption support
 */
var tlsSessionStore = {};
server.on('newSession', (id, data, cb) => {
  tlsSessionStore[id.toString('hex')] = data;
  cb();
});
server.on('resumeSession', (id, cb) => {
  cb(null, tlsSessionStore[id.toString('hex')] || null);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges'.red);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use'.red);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(('Listening on ' + bind).green);
}
